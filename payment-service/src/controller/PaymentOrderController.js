const OrderService = require("../service/OrderService");

// T·∫°o ƒë∆°n h√†ng t·ª´ thanh to√°n (sau khi thanh to√°n th√†nh c√¥ng)
const createOrderFromPayment = async (req, res) => {
    try {
        console.log("üõí Creating order from payment with data:", JSON.stringify(req.body, null, 2));
        
        const { 
            userId, 
            items, 
            receiverName, 
            receiverPhone, 
            receiverAddress, 
            paymentMethod, 
            note,
            shippingFee = 0,
            discount = 0,
            totalPrice,
            txnRef, // VNPay transaction reference
            vnpayData // Optional: VNPay callback data for verification
        } = req.body;
        
        // Validation c∆° b·∫£n
        if (!userId || !items || !receiverName || !receiverPhone || !receiverAddress || !paymentMethod) {
            return res.status(400).json({ 
                status: "ERR", 
                message: "Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: userId, items, receiverName, receiverPhone, receiverAddress, paymentMethod" 
            });
        }

        if (!Array.isArray(items) || items.length === 0) {
            return res.status(400).json({ 
                status: "ERR", 
                message: "Items ph·∫£i l√† m·∫£ng v√† kh√¥ng ƒë∆∞·ª£c r·ªóng" 
            });
        }

        // Validation t·ª´ng item
        for (const item of items) {
            if (!item.productId || !item.quantity || item.quantity <= 0) {
                return res.status(400).json({ 
                    status: "ERR", 
                    message: "M·ªói item ph·∫£i c√≥ productId v√† quantity > 0" 
                });
            }
        }

        // ‚úÖ Chu·∫©n b·ªã data ƒë·ªÉ t·∫°o order
        const orderData = {
            userId,
            items,
            receiverName,
            receiverPhone,
            receiverAddress,
            paymentMethod,
            note,
            shippingFee,
            discount,
            totalPrice // Frontend ƒë√£ t√≠nh s·∫µn
        };

        console.log("üíæ Creating order with data:", JSON.stringify(orderData, null, 2));

        // T·∫°o order
        const result = await OrderService.createOrder(orderData);
        
        if (result.status === "OK") {
            console.log("‚úÖ Order created successfully:", result.data._id);
            
            // ‚úÖ N·∫øu thanh to√°n VNPay th√†nh c√¥ng, c·∫≠p nh·∫≠t paymentStatus
            if (paymentMethod === "vnpay" && vnpayData && vnpayData.vnp_ResponseCode === "00") {
                // C√≥ th·ªÉ c·∫≠p nh·∫≠t th√™m transactionId t·ª´ VNPay
                console.log("üí≥ Updating payment status for order:", result.data._id);
            }
        }

        const statusCode = result.status === "OK" ? 201 : 400;
        return res.status(statusCode).json(result);
    } catch (error) {
        console.error("‚ùå Error creating order from payment:", error);
        return res.status(500).json({ status: "ERR", message: error.message });
    }
};

// L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
const getOrderById = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await OrderService.getOrderById(id);
        const statusCode = result.status === "OK" ? 200 : 400;
        return res.status(statusCode).json(result);
    } catch (error) {
        return res.status(500).json({ status: "ERR", message: error.message });
    }
};

// L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa user
const getOrderHistory = async (req, res) => {
    try {
        const { userId } = req.params;
        const result = await OrderService.getOrderHistory(userId, req.query);
        const statusCode = result.status === "OK" ? 200 : 400;
        return res.status(statusCode).json(result);
    } catch (error) {
        return res.status(500).json({ status: "ERR", message: error.message });
    }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
const updateOrderStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const result = await OrderService.updateOrderStatus(id, req.body);
        const statusCode = result.status === "OK" ? 200 : 400;
        return res.status(statusCode).json(result);
    } catch (error) {
        return res.status(500).json({ status: "ERR", message: error.message });
    }
};

module.exports = {
    createOrderFromPayment,
    getOrderById,
    getOrderHistory,
    updateOrderStatus
};

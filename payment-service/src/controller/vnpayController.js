const crypto = require("crypto");
const Payment = require("../models/paymentModel");
const Order = require("../models/OrderModel");
const { createVnpayUrl } = require("../service/vnpayService"); 

// ================================
//  T·∫†O THANH TO√ÅN VNPAY
// ================================
const createPayment = async (req, res) => {
  try {
    const { txnRef, amount, bankCode, orderData } = req.body;

    // ‚úÖ Validation: ch·ªâ c·∫ßn txnRef (temporary ID) v√† amount
    if (!txnRef || !amount) {
      return res.status(400).json({ 
        status: "ERR", 
        message: "Thi·∫øu txnRef ho·∫∑c amount" 
      });
    }

    // ‚úÖ X√ìA PH·∫¶N KI·ªÇM TRA ORDER - v√¨ order ch∆∞a t·ªìn t·∫°i
    // Order s·∫Ω ƒë∆∞·ª£c t·∫°o SAU KHI thanh to√°n th√†nh c√¥ng trong callback
    
    console.log("üîß Creating payment URL with txnRef:", txnRef);
    console.log("üîß Order data to be saved after payment:", orderData);

    // T·∫°o URL VNPay v·ªõi txnRef t·∫°m th·ªùi
    const paymentUrl = createVnpayUrl(txnRef, amount, bankCode);
    console.log("üîß Generated VNPay URL:", paymentUrl);

    // ‚úÖ KH√îNG L∆ØU PAYMENT V√ÄO DB - v√¨ ch∆∞a c√≥ order
    // Payment s·∫Ω ƒë∆∞·ª£c t·∫°o SAU KHI order ƒë∆∞·ª£c t·∫°o trong callback

    console.log("‚úÖ Created VNPay Payment URL for txnRef:", txnRef);
    res.status(200).json({ 
      status: "OK", 
      message: "T·∫°o URL thanh to√°n th√†nh c√¥ng",
      data: { 
        paymentUrl,
        txnRef 
      } 
    });
  } catch (err) {
    console.error("‚ùå Error createPayment:", err);
    res.status(500).json({ 
      status: "ERR", 
      message: "Kh√¥ng th·ªÉ t·∫°o thanh to√°n VNPay",
      error: err.message 
    });
  }
};

// ================================
// X·ª¨ L√ù CALLBACK T·ª™ VNPAY
// ================================
const vnpayCallback = async (req, res) => {
  try {
    const vnp_ResponseCode = req.query.vnp_ResponseCode;
    const vnp_TxnRef = req.query.vnp_TxnRef; // txnRef t·∫°m th·ªùi
    const vnp_SecureHash = req.query.vnp_SecureHash;
    const vnp_Amount = req.query.vnp_Amount;

    console.log("üîî VNPay callback received for txnRef:", vnp_TxnRef);
    console.log("üîî Response code:", vnp_ResponseCode);

    // X√°c minh ch·ªØ k√Ω VNPay
    const sortedParams = {};
    Object.keys(req.query)
      .sort()
      .forEach((key) => {
        if (key.startsWith("vnp_") && key !== "vnp_SecureHash") {
          sortedParams[key] = req.query[key];
        }
      });

    const signData = Object.entries(sortedParams)
      .map(([k, v]) => `${k}=${v}`)
      .join("&");

    const secureHash = crypto
      .createHmac("sha512", process.env.VNP_HASH_SECRET)
      .update(signData)
      .digest("hex");

    if (secureHash !== vnp_SecureHash) {
      console.warn("‚ö†Ô∏è Invalid VNPay signature");
      const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
      return res.redirect(`${baseUrl}/payment-result?status=error&message=Invalid signature`);
    }

    // X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n
    const status = vnp_ResponseCode === "00" ? "success" : "failed";
    console.log("‚úÖ Payment status:", status);

    // ‚úÖ KH√îNG T·∫†O ORDER ·ªû ƒê√ÇY - Frontend s·∫Ω g·ªçi API createOrderFromPayment sau khi verify
    // Ch·ªâ redirect v·ªÅ frontend v·ªõi th√¥ng tin thanh to√°n
    
    // Redirect v·ªÅ frontend v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
    const redirectUrl = `${baseUrl}/payment-result?vnp_ResponseCode=${vnp_ResponseCode}&vnp_TransactionStatus=${req.query.vnp_TransactionStatus}&vnp_TxnRef=${vnp_TxnRef}&vnp_Amount=${vnp_Amount}&vnp_OrderInfo=${encodeURIComponent(req.query.vnp_OrderInfo || '')}`;
    
    console.log('üîó Redirecting to:', redirectUrl);
    console.log('üîó VNPay params:', req.query);
    
    return res.redirect(redirectUrl);
  } catch (err) {
    console.error("‚ùå Error in VNPay callback:", err);
    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
    return res.redirect(`${baseUrl}/payment-result?status=error&message=Callback error`);
  }
};

// ================================
// HO√ÄN TI·ªÄN (REFUND)
// ================================
const refundPayment = async (req, res) => {
  try {
    const { orderId } = req.body;
    if (!orderId) return res.status(400).json({ error: "Thi·∫øu orderId" });

    const payment = await Payment.findOne({ orderId });
    if (!payment) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y giao d·ªãch" });

    payment.status = "refunded";
    await payment.save();

    const order = await Order.findById(orderId);
    if (order) {
      order.paymentStatus = "refunded";
      await order.save();
    }

    console.log(`üí∏ Refunded Payment for Order ${orderId}`);
    res.status(200).json({ message: "Ho√†n ti·ªÅn th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå Error refundPayment:", err);
    res.status(500).json({ error: "Ho√†n ti·ªÅn th·∫•t b·∫°i" });
  }
};

// ================================
//  XEM DANH S√ÅCH GIAO D·ªäCH TH·∫§T B·∫†I
// ================================
const getFailedPayments = async (req, res) => {
  try {
    const failed = await Payment.find({ status: "failed" });
    res.status(200).json(failed);
  } catch (err) {
    console.error("‚ùå Error getFailedPayments:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch giao d·ªãch th·∫•t b·∫°i" });
  }
};

module.exports = {
  createPayment,
  vnpayCallback,
  refundPayment,
  getFailedPayments,
};
